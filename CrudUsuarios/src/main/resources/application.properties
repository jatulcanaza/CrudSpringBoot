# Configuración de la base de datos para la aplicación Spring Boot

# URL de conexión a la base de datos MySQL.
# Formato general: jdbc:mysql://<host>:<puerto>/<nombre_base_de_datos>
spring.datasource.url=jdbc:mysql://localhost:3306/usuarios
# En este caso:
# - localhost: indica que la base de datos está en el servidor local.
# - 3306: es el puerto predeterminado para MySQL.
# - clientes: es el nombre de la base de datos a la que se conectará la aplicación.

# Nombre de usuario para autenticar en la base de datos.
spring.datasource.username=root
# En este caso, 'root' es el usuario predeterminado de MySQL.

# Contraseña del usuario de la base de datos.
spring.datasource.password=admin123
# 'admin123' es la contraseña configurada para el usuario root en MySQL.

# Configuración de Hibernate (el ORM utilizado por Spring Boot para interactuar con la base de datos).
# Define cómo manejar el esquema de la base de datos.
# Opciones comunes:
# - create: Crea las tablas al iniciar la aplicación (y elimina las existentes).
# - update: Actualiza las tablas sin eliminar datos.
# - validate: Verifica que las tablas sean compatibles con las entidades Java.
# - none: No realiza cambios en el esquema.
spring.jpa.hibernate.ddl-auto=update
# En este caso, 'update' asegura que cualquier cambio en las entidades se refleje en la base de datos sin perder datos existentes.

# Habilita la impresión de las consultas SQL generadas por Hibernate en la consola.
spring.jpa.show-sql=true
# Útil para depuración, ya que muestra las consultas SQL que Hibernate ejecuta en la base de datos.

# Especifica el dialecto de Hibernate que se usará para generar las consultas SQL.
# El dialecto es una clase que adapta las consultas SQL al tipo de base de datos.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
# En este caso, se utiliza el dialecto específico para MySQL.

